<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Cards - Anki Diff Selection Tool</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container-fluid {
            padding: 0 30px;
        }
        .header {
            background-color: white;
            padding: 15px 30px;
            margin-bottom: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        .card-container {
            margin-bottom: 20px;
        }
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .tab-pane {
            padding: 20px;
            background-color: white;
            border: 1px solid #dee2e6;
            border-top: none;
            border-radius: 0 0 5px 5px;
        }
        .anki-card {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: white;
        }
        .anki-card.selected {
            border: 2px solid #0d6efd;
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
        }
        .anki-question {
            font-weight: bold;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }
        .anki-answer {
            border-top: 1px solid #eee;
            padding-top: 10px;
            margin-top: 10px;
        }
        .card-selector {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 15px 0;
            gap: 10px;
        }
        .card-count {
            font-size: 0.9rem;
            color: #6c757d;
            text-align: right;
        }
        .pagination {
            justify-content: center;
            margin-top: 20px;
        }
        .search-box {
            margin-bottom: 15px;
        }
        .html-content img {
            max-width: 100%;
            height: auto;
        }
        .diff-highlight {
            background-color: #fcf8e3;
            padding: 2px;
        }
        .fixed-action-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- Header with stats and actions -->
        <div class="header">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2>Anki Diff Selection Tool</h2>
                    <div class="d-flex flex-wrap">
                        <span class="badge bg-primary me-2">Total Cards: {{ data.stats.file1_total + data.stats.file2_total }}</span>
                        <span class="badge bg-success me-2">Identical: {{ data.stats.identical }}</span>
                        <span class="badge bg-warning me-2">Different: {{ data.stats.different }}</span>
                        <span class="badge bg-info me-2">Only in {{ data.file1_name }}: {{ data.stats.only_file1 }}</span>
                        <span class="badge bg-info">Only in {{ data.file2_name }}: {{ data.stats.only_file2 }}</span>
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <button id="saveBtn" class="btn btn-outline-primary me-2">Save Selections</button>
                    <button id="exportBtn" class="btn btn-success me-2">Generate Export</button>
                    <button id="resetBtn" class="btn btn-outline-danger">Reset</button>
                </div>
            </div>
        </div>
        <!-- Tabs for different card categories -->
        <ul class="nav nav-tabs" id="cardTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="different-tab" data-bs-toggle="tab" data-bs-target="#different" type="button" role="tab">Different Cards ({{ data.stats.different }})</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="identical-tab" data-bs-toggle="tab" data-bs-target="#identical" type="button" role="tab">Identical Cards ({{ data.stats.identical }})</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="unique1-tab" data-bs-toggle="tab" data-bs-target="#unique1" type="button" role="tab">Only in {{ data.file1_name }} ({{ data.stats.only_file1 }})</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="unique2-tab" data-bs-toggle="tab" data-bs-target="#unique2" type="button" role="tab">Only in {{ data.file2_name }} ({{ data.stats.only_file2 }})</button>
            </li>
        </ul>

        <div class="tab-content" id="cardTabsContent">
            <!-- Different cards tab -->
            <div class="tab-pane fade show active" id="different" role="tabpanel">
                <div class="search-box">
                    <input type="text" id="differentSearch" class="form-control" placeholder="Search different cards...">
                </div>
                
                <div id="differentCards">
                    <div id="differentPagination" class="pagination"></div>
                    
                    {% for card in data.different_cards %}
                    <div class="anki-card different-card" data-index="{{ loop.index0 }}">
                        <div class="anki-question html-content">{{ card.question|safe }}</div>
                        <div class="row">
                            <div class="col-md-6">
                                <h5>{{ data.file1_name }}</h5>
                                <div class="anki-answer html-content {% if card.selected == 'file1' %}selected{% endif %}" data-source="file1">{{ card.file1_answer|safe }}</div>
                            </div>
                            <div class="col-md-6">
                                <h5>{{ data.file2_name }}</h5>
                                <div class="anki-answer html-content {% if card.selected == 'file2' %}selected{% endif %}" data-source="file2">{{ card.file2_answer|safe }}</div>
                            </div>
                        </div>
                        <div class="card-selector">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="select-{{ loop.index0 }}" id="select1-{{ loop.index0 }}" value="file1" {% if card.selected == 'file1' %}checked{% endif %}>
                                <label class="form-check-label" for="select1-{{ loop.index0 }}">Use {{ data.file1_name }}</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="select-{{ loop.index0 }}" id="select2-{{ loop.index0 }}" value="file2" {% if card.selected == 'file2' %}checked{% endif %}>
                                <label class="form-check-label" for="select2-{{ loop.index0 }}">Use {{ data.file2_name }}</label>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                    
                    <div id="differentPaginationBottom" class="pagination"></div>
                </div>
            </div>
            
            <!-- Identical cards tab -->
            <div class="tab-pane fade" id="identical" role="tabpanel">
                <div class="search-box">
                    <input type="text" id="identicalSearch" class="form-control" placeholder="Search identical cards...">
                </div>
                
                <div id="identicalCards">
                    <div id="identicalPagination" class="pagination"></div>
                    
                    {% for card in data.identical_cards %}
                    <div class="anki-card identical-card">
                        <div class="anki-question html-content">{{ card.question|safe }}</div>
                        <div class="anki-answer html-content">{{ card.answer|safe }}</div>
                    </div>
                    {% endfor %}
                    
                    <div id="identicalPaginationBottom" class="pagination"></div>
                </div>
            </div>
            <!-- Unique cards in File 1 tab -->
            <div class="tab-pane fade" id="unique1" role="tabpanel">
                <div class="search-box">
                    <input type="text" id="unique1Search" class="form-control" placeholder="Search cards unique to {{ data.file1_name }}...">
                </div>
                
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="includeAllFile1" checked>
                    <label class="form-check-label" for="includeAllFile1">Include all cards from {{ data.file1_name }} in export</label>
                </div>
                
                <div id="unique1Cards">
                    <div id="unique1Pagination" class="pagination"></div>
                    
                    {% for card in data.unique_file1 %}
                    <div class="anki-card unique-card" data-index="{{ loop.index0 }}">
                        <div class="form-check">
                            <input class="form-check-input unique1-checkbox" type="checkbox" id="unique1-{{ loop.index0 }}" data-index="{{ loop.index0 }}" {% if card.selected %}checked{% endif %}>
                            <label class="form-check-label" for="unique1-{{ loop.index0 }}">Include this card</label>
                        </div>
                        <div class="anki-question html-content">{{ card.question|safe }}</div>
                        <div class="anki-answer html-content">{{ card.answer|safe }}</div>
                    </div>
                    {% endfor %}
                    
                    <div id="unique1PaginationBottom" class="pagination"></div>
                </div>
            </div>
            
            <!-- Unique cards in File 2 tab -->
            <div class="tab-pane fade" id="unique2" role="tabpanel">
                <div class="search-box">
                    <input type="text" id="unique2Search" class="form-control" placeholder="Search cards unique to {{ data.file2_name }}...">
                </div>
                
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="includeAllFile2" checked>
                    <label class="form-check-label" for="includeAllFile2">Include all cards from {{ data.file2_name }} in export</label>
                </div>
                
                <div id="unique2Cards">
                    <div id="unique2Pagination" class="pagination"></div>
                    
                    {% for card in data.unique_file2 %}
                    <div class="anki-card unique-card" data-index="{{ loop.index0 }}">
                        <div class="form-check">
                            <input class="form-check-input unique2-checkbox" type="checkbox" id="unique2-{{ loop.index0 }}" data-index="{{ loop.index0 }}" {% if card.selected %}checked{% endif %}>
                            <label class="form-check-label" for="unique2-{{ loop.index0 }}">Include this card</label>
                        </div>
                        <div class="anki-question html-content">{{ card.question|safe }}</div>
                        <div class="anki-answer html-content">{{ card.answer|safe }}</div>
                    </div>
                    {% endfor %}
                    
                    <div id="unique2PaginationBottom" class="pagination"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Fixed action button for generate export -->
    <div class="fixed-action-btn">
        <button id="fixedExportBtn" class="btn btn-success btn-lg rounded-circle">⬇️</button>
    </div>
    <!-- Toast for notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="resultToast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize pagination
        const ITEMS_PER_PAGE = 10;
        let currentPage = {
            'different': 1,
            'identical': 1,
            'unique1': 1,
            'unique2': 1
        };
        
        // Get data from template
        const data = {{ data|tojson|safe }};
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Set up pagination
            setupPagination('different', data.different_cards);
            setupPagination('identical', data.identical_cards);
            setupPagination('unique1', data.unique_file1);
            setupPagination('unique2', data.unique_file2);
            
            // Update visibility based on current page
            updateVisibility('different');
            
            // Set up search functionality
            document.getElementById('differentSearch').addEventListener('input', function() {
                filterCards('different', this.value);
            });
            
            document.getElementById('identicalSearch').addEventListener('input', function() {
                filterCards('identical', this.value);
            });
            
            document.getElementById('unique1Search').addEventListener('input', function() {
                filterCards('unique1', this.value);
            });
            
            document.getElementById('unique2Search').addEventListener('input', function() {
                filterCards('unique2', this.value);
            });
            
            // Set up card selection
            setupCardSelection();
            
            // Set up "include all" toggles
            document.getElementById('includeAllFile1').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.unique1-checkbox');
                checkboxes.forEach(cb => {
                    cb.checked = this.checked;
                    const idx = parseInt(cb.getAttribute('data-index'));
                    data.unique_file1[idx].selected = this.checked;
                });
            });
            
            document.getElementById('includeAllFile2').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.unique2-checkbox');
                checkboxes.forEach(cb => {
                    cb.checked = this.checked;
                    const idx = parseInt(cb.getAttribute('data-index'));
                    data.unique_file2[idx].selected = this.checked;
                });
            });
            
            // Set up individual checkboxes
            document.querySelectorAll('.unique1-checkbox').forEach(cb => {
                cb.addEventListener('change', function() {
                    const idx = parseInt(this.getAttribute('data-index'));
                    data.unique_file1[idx].selected = this.checked;
                });
            });
            
            document.querySelectorAll('.unique2-checkbox').forEach(cb => {
                cb.addEventListener('change', function() {
                    const idx = parseInt(this.getAttribute('data-index'));
                    data.unique_file2[idx].selected = this.checked;
                });
            });
            
            // Set up tab change
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', function(event) {
                    const target = event.target.getAttribute('data-bs-target').substring(1);
                    updateVisibility(target);
                });
            });
            
            // Set up save button
            document.getElementById('saveBtn').addEventListener('click', function() {
                saveSelections();
            });
            
            // Set up export buttons
            document.getElementById('exportBtn').addEventListener('click', function() {
                generateExport();
            });
            
            document.getElementById('fixedExportBtn').addEventListener('click', function() {
                generateExport();
            });
            
            // Set up reset button
            document.getElementById('resetBtn').addEventListener('click', function() {
                if (confirm('Are you sure you want to reset? This will clear all your selections.')) {
                    window.location.href = '/reset';
                }
            });
        });
        
        function setupCardSelection() {
            // Set up radio buttons for different cards
            document.querySelectorAll('.different-card').forEach(card => {
                const idx = parseInt(card.getAttribute('data-index'));
                const radioButtons = card.querySelectorAll('input[type="radio"]');
                
                radioButtons.forEach(radio => {
                    radio.addEventListener('change', function() {
                        data.different_cards[idx].selected = this.value;
                        
                        // Update visual indicator
                        card.querySelectorAll('.anki-answer').forEach(answer => {
                            if (answer.getAttribute('data-source') === this.value) {
                                answer.classList.add('selected');
                            } else {
                                answer.classList.remove('selected');
                            }
                        });
                    });
                });
            });
        }
        
        function setupPagination(type, items) {
            const totalPages = Math.ceil(items.length / ITEMS_PER_PAGE);
            
            if (totalPages <= 1) {
                // No need for pagination
                return;
            }
            
            const paginationElement = document.getElementById(`${type}Pagination`);
            const bottomPaginationElement = document.getElementById(`${type}PaginationBottom`);
            
            paginationElement.innerHTML = createPaginationHTML(type, totalPages);
            bottomPaginationElement.innerHTML = createPaginationHTML(type, totalPages);
        }
        
        function createPaginationHTML(type, totalPages) {
            let html = `<nav><ul class="pagination">`;
            
            // Previous button
            html += `<li class="page-item ${currentPage[type] === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="changePage('${type}', ${currentPage[type] - 1}); return false;">Previous</a>
            </li>`;
            
            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                html += `<li class="page-item ${currentPage[type] === i ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changePage('${type}', ${i}); return false;">${i}</a>
                </li>`;
            }
            
            // Next button
            html += `<li class="page-item ${currentPage[type] === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="changePage('${type}', ${currentPage[type] + 1}); return false;">Next</a>
            </li>`;
            
            html += `</ul></nav>`;
            
            return html;
        }
        
        function changePage(type, page) {
            const items = getItems(type);
            const totalPages = Math.ceil(items.length / ITEMS_PER_PAGE);
            
            if (page < 1 || page > totalPages) {
                return;
            }
            
            currentPage[type] = page;
            updateVisibility(type);
            
            // Update pagination
            setupPagination(type, items);
        }
        
        function getItems(type) {
            switch(type) {
                case 'different': return data.different_cards;
                case 'identical': return data.identical_cards;
                case 'unique1': return data.unique_file1;
                case 'unique2': return data.unique_file2;
                default: return [];
            }
        }
        
        function updateVisibility(type) {
            const cards = document.querySelectorAll(`.${type}-card`);
            const start = (currentPage[type] - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;
            
            let visibleCount = 0;
            
            cards.forEach((card, index) => {
                // Check if the card matches the current filter (search)
                const isVisible = !card.classList.contains('filtered-out');
                
                if (isVisible) {
                    visibleCount++;
                    
                    // Check if the card is on the current page
                    if (visibleCount > start && visibleCount <= end) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                } else {
                    card.style.display = 'none';
                }
            });
        }
        
        function filterCards(type, searchText) {
            const cards = document.querySelectorAll(`.${type}-card`);
            const lowerSearchText = searchText.toLowerCase();
            
            cards.forEach(card => {
                const question = card.querySelector('.anki-question').textContent.toLowerCase();
                const answers = Array.from(card.querySelectorAll('.anki-answer')).map(a => a.textContent.toLowerCase());
                
                let isMatch = false;
                if (question.includes(lowerSearchText)) {
                    isMatch = true;
                } else {
                    for (let answer of answers) {
                        if (answer.includes(lowerSearchText)) {
                            isMatch = true;
                            break;
                        }
                    }
                }
                
                if (isMatch) {
                    card.classList.remove('filtered-out');
                } else {
                    card.classList.add('filtered-out');
                }
            });
            
            // Reset to first page and update visibility
            currentPage[type] = 1;
            updateVisibility(type);
            setupPagination(type, getItems(type));
        }
        
        function saveSelections() {
            // Send data to server
            fetch('/save_selections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                showToast('Success', 'Your selections have been saved');
            })
            .catch(error => {
                showToast('Error', 'Failed to save selections: ' + error);
            });
        }
        
        function generateExport() {
            // Save selections first
            fetch('/save_selections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(() => {
                // Then redirect to generate export
                window.location.href = '/generate_export';
            })
            .catch(error => {
                showToast('Error', 'Failed to save selections: ' + error);
            });
        }
        
        function showToast(title, message) {
            const toastEl = document.getElementById('resultToast');
            const toast = new bootstrap.Toast(toastEl);
            
            document.getElementById('toastTitle').textContent = title;
            document.getElementById('toastMessage').textContent = message;
            
            toast.show();
        }
    </script>
</body>
</html>
